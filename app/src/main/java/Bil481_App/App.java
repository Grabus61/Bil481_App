/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Bil481_App;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;


public class App {
    public static boolean isNumbersInArrayList(ArrayList<Integer> list, int num1, int num2){
        if(list == null){
            return false;
        }

        if(list.size() <= 1){
            return false;
        }

        for(int check1 : list){
            if(check1 == num1){
                for(int check2 : list){
                    if(check2 == num2){
                        return true;
                    }
                }
            }
        }

        return false;
    }

    public static void main(String[] args) {
        int port = Integer.parseInt(System.getenv("PORT"));
        port(port);

        get("/", (req, res) -> "Hello, World");

        post("/compute", (req, res) -> {
          //System.out.println(req.queryParams("input1"));
          //System.out.println(req.queryParams("input2"));

          String input1 = req.queryParams("input1");
          java.util.Scanner sc1 = new java.util.Scanner(input1);
          sc1.useDelimiter("[;\r\n]+");
          java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
          while (sc1.hasNext())
          {
            int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
            inputList.add(value);
          }
          sc1.close();
          System.out.println(inputList);


          String num1 = req.queryParams("num1").replaceAll("\\s","");
          String num2 = req.queryParams("num2").replaceAll("\\s","");
          int num1Int = Integer.parseInt(num1);
          int num2Int = Integer.parseInt(num2);

          boolean result = App.isNumbersInArrayList(inputList, num1Int, num2Int);

          Map<String, Boolean> map = new HashMap<String, Boolean>();
          map.put("result", result);
          return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());


        get("/compute",
            (rq, rs) -> {
              Map<String, String> map = new HashMap<String, String>();
              map.put("result", "not computed yet!");
              return new ModelAndView(map, "compute.mustache");
            },
            new MustacheTemplateEngine());
    }

    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; //return default port if heroku-port isn't set (i.e. on localhost)
    }
}
